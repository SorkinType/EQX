type Comment {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  user: UsersPermissionsUser
  text: String!
  x: Int
  y: Int
  radius: Int
  SomeText: String
}

input CommentInput {
  user: ID
  text: String!
  x: Int
  y: Int
  radius: Int
  SomeText: String
}

input createCommentInput {
  data: CommentInput
}

type createCommentPayload {
  comment: Comment
}

input createFileInput {
  data: FileInput
}

type createFilePayload {
  file: UploadFile
}

input createFontInput {
  data: FontInput
}

type createFontPayload {
  font: Font
}

input createOrganizationInput {
  data: OrganizationInput
}

type createOrganizationPayload {
  organization: Organization
}

input createProjectInput {
  data: ProjectInput
}

type createProjectPayload {
  project: Project
}

input createQuestionInput {
  data: QuestionInput
}

type createQuestionPayload {
  question: Question
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createTestInput {
  data: TestInput
}

type createTestPayload {
  test: Test
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteCommentInput {
  where: InputID
}

type deleteCommentPayload {
  comment: Comment
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteFontInput {
  where: InputID
}

type deleteFontPayload {
  font: Font
}

input deleteOrganizationInput {
  where: InputID
}

type deleteOrganizationPayload {
  organization: Organization
}

input deleteProjectInput {
  where: InputID
}

type deleteProjectPayload {
  project: Project
}

input deleteQuestionInput {
  where: InputID
}

type deleteQuestionPayload {
  question: Question
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteTestInput {
  where: InputID
}

type deleteTestPayload {
  test: Test
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editCommentInput {
  user: ID
  text: String
  x: Int
  y: Int
  radius: Int
  SomeText: String
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editFontInput {
  file: ID
  name: String
  weight: String
  style: String
  variable: Boolean
  minor_version: Int
  major_version: Int
}

input editOrganizationInput {
  users: [ID]
  name: String
  projects: [ID]
}

input editProjectInput {
  name: String
  major_version: Int
  minor_version: Int
  fonts: [ID]
  tags: [ID]
  archived: Boolean
  tests: [ID]
  users: [ID]
  owners: [ID]
}

input editQuestionInput {
  editor_image: JSON
  code_image: JSON
  image_type: ENUM_QUESTION_IMAGE_TYPE
  description: String
  question: String
  reference_images: [ID]
  uploaded_image: ID
  published: Boolean
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTagInput {
  name: String
  color: String
  projects: [ID]
}

input editTestInput {
  name: String
  tags: JSON
  major_version: Int
  minor_version: Int
  questions: [ID]
  completness: Float
  archived: Boolean
  users: [ID]
  owners: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  Avatar: ID
  comment: ID
  projects: [ID]
  tests: [ID]
  owned_tests: [ID]
  owned_projects: [ID]
}

enum ENUM_QUESTION_IMAGE_TYPE {
  uploaded_image
  code_image
  editor_image
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type Font {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  file: UploadFile
  name: String
  weight: String
  style: String
  variable: Boolean
  minor_version: Int
  major_version: Int
}

input FontInput {
  file: ID
  name: String
  weight: String
  style: String
  variable: Boolean
  minor_version: Int
  major_version: Int
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | Comment | createCommentPayload | updateCommentPayload | deleteCommentPayload | Font | createFontPayload | updateFontPayload | deleteFontPayload | Organization | createOrganizationPayload | updateOrganizationPayload | deleteOrganizationPayload | Project | createProjectPayload | updateProjectPayload | deleteProjectPayload | Question | createQuestionPayload | updateQuestionPayload | deleteQuestionPayload | Tag | createTagPayload | updateTagPayload | deleteTagPayload | Test | createTestPayload | updateTestPayload | deleteTestPayload | UploadFile | createFilePayload | updateFilePayload | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createComment(input: createCommentInput): createCommentPayload
  updateComment(input: updateCommentInput): updateCommentPayload
  deleteComment(input: deleteCommentInput): deleteCommentPayload
  createFont(input: createFontInput): createFontPayload
  updateFont(input: updateFontInput): updateFontPayload
  deleteFont(input: deleteFontInput): deleteFontPayload
  createOrganization(input: createOrganizationInput): createOrganizationPayload
  updateOrganization(input: updateOrganizationInput): updateOrganizationPayload
  deleteOrganization(input: deleteOrganizationInput): deleteOrganizationPayload
  createProject(input: createProjectInput): createProjectPayload
  updateProject(input: updateProjectInput): updateProjectPayload
  deleteProject(input: deleteProjectInput): deleteProjectPayload
  createQuestion(input: createQuestionInput): createQuestionPayload
  updateQuestion(input: updateQuestionInput): updateQuestionPayload
  deleteQuestion(input: deleteQuestionInput): deleteQuestionPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload
  createTest(input: createTestInput): createTestPayload
  updateTest(input: updateTestInput): updateTestPayload
  deleteTest(input: deleteTestInput): deleteTestPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Organization {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
}

input OrganizationInput {
  users: [ID]
  name: String
  projects: [ID]
}

type Project {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  major_version: Int
  minor_version: Int
  archived: Boolean
  fonts(sort: String, limit: Int, start: Int, where: JSON): [Font]
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  tests(sort: String, limit: Int, start: Int, where: JSON): [Test]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  owners(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

input ProjectInput {
  name: String!
  major_version: Int
  minor_version: Int
  fonts: [ID]
  tags: [ID]
  archived: Boolean
  tests: [ID]
  users: [ID]
  owners: [ID]
}

type Query {
  comment(id: ID!): Comment
  comments(sort: String, limit: Int, start: Int, where: JSON): [Comment]
  font(id: ID!): Font
  fonts(sort: String, limit: Int, start: Int, where: JSON): [Font]
  organization(id: ID!): Organization
  organizations(sort: String, limit: Int, start: Int, where: JSON): [Organization]
  project(id: ID!): Project
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
  question(id: ID!): Question
  questions(sort: String, limit: Int, start: Int, where: JSON): [Question]
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  test(id: ID!): Test
  tests(sort: String, limit: Int, start: Int, where: JSON): [Test]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Question {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  editor_image: JSON
  code_image: JSON
  image_type: ENUM_QUESTION_IMAGE_TYPE
  description: String
  question: String
  uploaded_image: UploadFile
  published: Boolean
  reference_images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input QuestionInput {
  editor_image: JSON
  code_image: JSON
  image_type: ENUM_QUESTION_IMAGE_TYPE
  description: String
  question: String
  reference_images: [ID]
  uploaded_image: ID
  published: Boolean
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  color: String
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
}

input TagInput {
  name: String
  color: String
  projects: [ID]
}

type Test {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  tags: JSON
  major_version: Int!
  minor_version: Int!
  completness: Float
  archived: Boolean
  questions(sort: String, limit: Int, start: Int, where: JSON): [Question]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  owners(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

input TestInput {
  name: String!
  tags: JSON
  major_version: Int!
  minor_version: Int!
  questions: [ID]
  completness: Float
  archived: Boolean
  users: [ID]
  owners: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateCommentInput {
  where: InputID
  data: editCommentInput
}

type updateCommentPayload {
  comment: Comment
}

input updateFileInput {
  where: InputID
  data: editFileInput
}

type updateFilePayload {
  file: UploadFile
}

input updateFontInput {
  where: InputID
  data: editFontInput
}

type updateFontPayload {
  font: Font
}

input updateOrganizationInput {
  where: InputID
  data: editOrganizationInput
}

type updateOrganizationPayload {
  organization: Organization
}

input updateProjectInput {
  where: InputID
  data: editProjectInput
}

type updateProjectPayload {
  project: Project
}

input updateQuestionInput {
  where: InputID
  data: editQuestionInput
}

type updateQuestionPayload {
  question: Question
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateTestInput {
  where: InputID
  data: editTestInput
}

type updateTestPayload {
  test: Test
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  Avatar: ID
  comment: ID
  projects: [ID]
  tests: [ID]
  owned_tests: [ID]
  owned_projects: [ID]
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  Avatar: UploadFile
  comment: Comment
  projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
  tests(sort: String, limit: Int, start: Int, where: JSON): [Test]
  owned_tests(sort: String, limit: Int, start: Int, where: JSON): [Test]
  owned_projects(sort: String, limit: Int, start: Int, where: JSON): [Project]
}
